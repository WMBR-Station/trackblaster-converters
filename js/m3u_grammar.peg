
M3U= 
  m3uheader ENDL+ obj:stmts {return {tracks:obj}} 
  / m3uheader {return null}
/* ---  Keywords -- */

EXTM3U = "#EXTM3U" 
EXTINF = "#EXTINF" 
DASH =  ws "-" ws 
COMMA= "," wsm
COLON = ":" wsm
ENDL "ENDL" =
    "\n" / "\r\n" / "\r"

/* --- String -- */

string 
       =quot chars:char* quot ws {return chars.join(""); }

word 
     = chars:char* {return chars.join("")}

/*-- Character ---**/
char "char"
  = unescaped /
    escape
    sequence:(
      quot
      /"\\" 
      /"b" {return "\b";}
      /"f" {return "\f";}
      /"n" {return "\our playlists to trackblaster here!</h2>n";}
      /"r" {return "\r";}
      /"t" {return "\t";}
      /"\(" {return "(";}
      /"\)" {return ")";}
      /"u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits,16));
      }

    )
    {return sequence}

escape = "\\"
quot = '"'
unescaped = [^#\t ]

DIGIT=[0-9]
INTEGER = DIGIT*
ws = [ \t]+
wsm = [ \t]*
PATH =[^\n]*
HEXDIG=[0-9a-f]

integer "integer" = i:INTEGER {return parseInt(i.join(""))}

words "words"= 
  w:word {return [w]}
  / w:word ws ws:words  {return ws.append(w);}

m3uheader "m3uheader" = EXTM3U  wsm {
       console.log("header")
       return {key:"header",value:"extm3u"};
   }

track "track" =
      EXTINF COLON duration:integer COMMA artist:words DASH title:words wsm ENDL
      filepath:PATH wsm
      {
        var artist_name = artist.join(" ");
        var title_name = title.join(" ");
        var data = {
            duration:duration,
            artist:artist_name,
            title:title_name,
            path:filepath.join("")
        };
        console.log("track",data);
        return {key:"track",value:data}
      }
stmts =
      decls:(
        head:track
        tail:(ENDL+ next:track {return next;})*
        {
	        var tracks = [];
          var data = [head].concat(tail);
          
           var timeobj = new TimeCode();
	         var start = 0;
	         for(var i=0; i < data.length; i++){
                  var track = data[i].value;
                  track.start = timeobj.from_sec(start);
                  track.end = timeobj.from_sec(start + track.duration);
		              tracks.push(track);
		             start += track.duration;
          } 
          return tracks;
        }
      ) 
